{"version":3,"sources":["Layout/Header.js","Layout/NotFound.js","utils/api/index.js","Layout/ListDecks.js","Layout/Home.js","Layout/Study.js","Layout/Deck.js","Layout/DeckForm.js","Layout/DeckCreate.js","Layout/DeckEdit.js","Layout/CardForm.js","Layout/CardCreate.js","Layout/CardEdit.js","Layout/index.js","App.js","index.js"],"names":["Header","className","NotFound","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","a","fetch","response","status","Error","statusText","json","name","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","listCards","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard","append","ListDecks","useState","decks","setDecks","useEffect","output","console","log","loadData","handleDelete","target","value","window","confirm","deleteData","length","map","description","to","onClick","Home","Study","useParams","front","setFront","cardNumber","setCardNumber","setCards","setDeck","dataFromAPI","history","useHistory","Breadcrumb","aria-label","key","aria-current","back","push","Deck","handleDeckDelete","handleCardDelete","dataFromAPI2","DeckForm","formData","handleChange","type","onChange","style","width","rows","DeckCreate","setFormData","onSubmit","event","preventDefault","updateData","DeckEdit","CardForm","CardCreate","params","initialFormState","CardEdit","setCard","datafromApie2","Layout","exact","path","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.afa69a8f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">FlashCard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\nasync function fetchJson(url, options) {\n  try {\n    const response = await fetch(url, options);\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n    return await response.json();\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      throw error;\n    }\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal });\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { listDecks, deleteDeck } from \"../utils/api/index\";\n\nfunction ListDecks() {\n  const [decks, setDecks] = useState([]);\n  useEffect(() => {\n    async function loadData() {\n      try {\n        const output = await listDecks();\n        setDecks(output);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          // Ignore `AbortError`\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadData();\n  }, []);\n\n  const handleDelete = async ({ target }) => {\n    const value = target.value;\n\n    const result = window.confirm(\n      `Delete deck ID ${value}? You will not be able to recover it.`\n    );\n    if (result) {\n      async function deleteData() {\n        try {\n          await deleteDeck(value);\n          const output = await listDecks();\n          setDecks(output);\n        } catch (error) {\n          if (error.name === \"AbortError\") {\n            // Ignore `AbortError`\n            console.log(\"Aborted\");\n          } else {\n            throw error;\n          }\n        }\n      }\n      deleteData();\n    }\n  };\n\n  //console.log(\"deck\", deck);\n  if (decks.length > 0) {\n    return (\n      <div>\n        {decks.map((deck) => (\n          <div className=\"card\">\n            <div className=\"container\">\n              <div className=\"row card-header\">\n                <div className=\"col-10\">\n                  <h4>{deck.name}</h4>\n                </div>\n                <div className=\"col-2\">\n                  <p> {deck.cards.length} cards</p>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"card-body\">\n              <p className=\"card-text\">{deck.description}</p>\n              <div className=\"container\">\n                <div className=\"row justify-content-between\">\n                  <div className=\"col-4\">\n                    <Link to={`decks/${deck.id}`} className=\"btn btn-secondary\">\n                      View\n                    </Link>{\" \"}\n                    &nbsp;\n                    <Link\n                      to={`decks/${deck.id}/study`}\n                      className=\"btn btn-primary\"\n                    >\n                      Study\n                    </Link>\n                  </div>\n                  <div className=\"col-1\">\n                    <button\n                      className=\"btn btn-danger\"\n                      value={deck.id}\n                      onClick={handleDelete}\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n  return \"Please add a deck.\";\n}\nexport default ListDecks;\n","import React from \"react\";\nimport ListDecks from \"./ListDecks\";\nimport { Link } from \"react-router-dom\";\n\nfunction Home() {\n  return (\n    <div>\n      <div>\n        <Link to=\"/decks/new\" className=\"btn btn-secondary\">\n          Create Deck\n        </Link>\n      </div>\n      <br />\n      <ListDecks />\n    </div>\n  );\n}\nexport default Home;\n","import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api/index\";\n\nfunction Study() {\n  const params = useParams();\n  const deckId = params.deckId;\n  const [front, setFront] = useState(true);\n  const [cardNumber, setCardNumber] = useState(0);\n  const [cards, setCards] = useState({});\n  const [deck, setDeck] = useState({});\n  useEffect(() => {\n    setCards({});\n    async function loadData() {\n      try {\n        const dataFromAPI = await readDeck(deckId);\n        setDeck(dataFromAPI);\n        setCards(dataFromAPI.cards);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          // Ignore `AbortError`\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadData();\n  }, [deckId]);\n\n  function flipCard() {\n    setFront(!front);\n  }\n  const history = useHistory();\n  function nextCard() {\n    if (cardNumber + 1 < cards.length) {\n      setCardNumber(cardNumber + 1);\n      setFront(true);\n    } else {\n      const result = window.confirm(`Restart cards?\n            \n            Click 'cancel' to return to the home page.`);\n      if (result) {\n        setCardNumber(0);\n        setFront(true);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  }\n\n  function Breadcrumb() {\n    return (\n      <div className=\"navigation\">\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\" key=\"0\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className=\"breadcrumb-item\" key=\"1\">\n              <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\" key=\"2\">\n              Study\n            </li>\n          </ol>\n        </nav>\n      </div>\n    );\n  }\n  if (cards.length > 2) {\n    console.log(cards[0].front);\n    return (\n      <div>\n        <Breadcrumb />\n        <h2>Study: {deck.name}</h2>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">\n              Card {cardNumber + 1} of {cards.length}\n            </h5>\n            <p className=\"card-text\">\n              {front\n                ? `${cards[cardNumber].front}`\n                : `${cards[cardNumber].back}`}\n            </p>\n            <button className=\"btn btn-secondary\" onClick={flipCard}>\n              Flip\n            </button>{\" \"}\n            &nbsp;\n            {front ? (\n              \" \"\n            ) : (\n              <button className=\"btn btn-primary\" onClick={nextCard}>\n                Next\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <Breadcrumb />\n        <h2>Study: {deck.name}</h2>\n        <div className=\"card\">\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">Not Enough Cards.</h5>\n            <p className=\"card-text\">\n              You need at least 3 cards to study. There are {cards.length} cards\n              in this deck.\n            </p>\n            <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary\">\n              Add Cards\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Study;\n","import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport {\n  readDeck,\n  deleteDeck,\n  deleteCard,\n  listCards,\n} from \"../utils/api/index\";\n\nfunction Deck() {\n  const [deck, setDeck] = useState({});\n  const [cards, setCards] = useState({});\n  const params = useParams();\n  const deckId = params.deckId;\n  //console.log(deckId);\n  useEffect(() => {\n    setCards({});\n    async function loadData() {\n      try {\n        const dataFromAPI = await readDeck(deckId);\n        console.log(dataFromAPI);\n        setDeck(dataFromAPI);\n        setCards(dataFromAPI.cards);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          // Ignore `AbortError`\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadData();\n  }, [deckId]);\n\n  const history = useHistory();\n  const handleDeckDelete = async () => {\n    const result = window.confirm(\n      `Delete deck ID ${deckId}? You will not be able to recover it.`\n    );\n    if (result) {\n      async function deleteData() {\n        try {\n          await deleteDeck(deckId);\n          history.push(\"/\");\n        } catch (error) {\n          if (error.name === \"AbortError\") {\n            // Ignore `AbortError`\n            console.log(\"Aborted\");\n          } else {\n            throw error;\n          }\n        }\n      }\n      deleteData();\n    }\n  };\n  const handleCardDelete = async ({ target }) => {\n    const value = target.value;\n\n    const result = window.confirm(\n      `Delete card ID ${value}? You will not be able to recover it.`\n    );\n    if (result) {\n      async function deleteData() {\n        try {\n          await deleteCard(value);\n          const dataFromAPI2 = await listCards(deckId);\n          console.log(deckId, dataFromAPI2);\n          setCards(dataFromAPI2);\n        } catch (error) {\n          if (error.name === \"AbortError\") {\n            // Ignore `AbortError`\n            console.log(\"Aborted\");\n          } else {\n            throw error;\n          }\n        }\n      }\n      deleteData();\n    }\n  };\n\n  if (cards.length > 0) {\n    return (\n      <div>\n        <nav aria-label=\"breadcrumb\">\n          <ol className=\"breadcrumb\">\n            <li className=\"breadcrumb-item\" key=\"0\">\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li className=\"breadcrumb-item active\" aria-current=\"page\" key=\"1\">\n              {deck.name}\n            </li>\n          </ol>\n        </nav>\n        <h3>{deck.name}</h3>\n        <p>{deck.description}</p>\n        <div className=\"row justify-content-between\">\n          <div className=\"col-8\">\n            <Link to={`/decks/${deckId}/edit`} className=\"btn btn-secondary\">\n              Edit\n            </Link>{\" \"}\n            &nbsp;\n            <Link to={`/decks/${deckId}/study`} className=\"btn btn-primary\">\n              Study\n            </Link>{\" \"}\n            &nbsp;\n            <Link to={`/decks/${deckId}/cards/new`} className=\"btn btn-primary\">\n              Add Cards\n            </Link>\n          </div>\n          <div className=\"col-2\">\n            <button onClick={handleDeckDelete} className=\"btn btn-danger\">\n              Delete\n            </button>\n          </div>\n        </div>\n        <br />\n        <heading>\n          <h2>Cards</h2>\n        </heading>\n        <br />\n        {cards.map((card) => (\n          <div className=\"card\">\n            <div className=\"card-body\">\n              <div className=\"container\">\n                <div className=\"row justify-content-start\">\n                  <div className=\"col-6\">{card.front}</div>\n                  <div className=\"col-6\">{card.back}</div>\n                </div>\n                <div className=\"row\">\n                  <div className=\"col-9\"></div>\n                  <div className=\"col-3\">\n                    <Link\n                      to={`/decks/${deckId}/cards/${card.id}/edit`}\n                      className=\"btn btn-secondary\"\n                    >\n                      Edit\n                    </Link>{\" \"}\n                    &nbsp;\n                    <button\n                      onClick={handleCardDelete}\n                      value={card.id}\n                      className=\"btn btn-danger\"\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <div>\n          <nav aria-label=\"breadcrumb\">\n            <ol className=\"breadcrumb\">\n              <li className=\"breadcrumb-item\" key=\"0\">\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li\n                className=\"breadcrumb-item active\"\n                aria-current=\"page\"\n                key=\"1\"\n              >\n                {deck.name}\n              </li>\n            </ol>\n          </nav>\n          <h3>{deck.name}</h3>\n          <p>{deck.description}</p>\n          <div className=\"row justify-content-between\">\n            <div className=\"col-8\">\n              <Link to={`/decks/${deckId}/edit`} className=\"btn btn-secondary\">\n                Edit\n              </Link>{\" \"}\n              &nbsp;\n              <Link to={`/decks/${deckId}/study`} className=\"btn btn-primary\">\n                Study\n              </Link>{\" \"}\n              &nbsp;\n              <Link\n                to={`/decks/${deckId}/cards/new`}\n                className=\"btn btn-primary\"\n              >\n                Add Cards\n              </Link>\n            </div>\n            <div className=\"col-2\">\n              <button onClick={handleDeckDelete} className=\"btn btn-danger\">\n                Delete\n              </button>\n            </div>\n          </div>\n          <br />\n          <h2>No Cards, Please add some.</h2>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Deck;\n","import React from \"react\";\n\nconst DeckForm = ({ formData, handleChange }) => {\n  return (\n    <div>\n      <label>Name:</label> <br />\n      <input\n        id=\"name\"\n        type=\"text\"\n        name=\"name\"\n        onChange={handleChange}\n        value={formData.name}\n        style={{ width: \"100%\" }}\n      />\n      <br />\n      <br />\n      <label>Description:</label> <br />\n      <textarea\n        id=\"description\"\n        type=\"textarea\"\n        name=\"description\"\n        rows=\"3\"\n        onChange={handleChange}\n        value={formData.description}\n        style={{ width: \"100%\" }}\n      />\n      <br />\n    </div>\n  );\n};\nexport default DeckForm;\n","import React, { useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport DeckForm from \"./DeckForm\";\nimport { createDeck } from \"../utils/api/index\";\n\nfunction DeckCreate() {\n  const initialFormState = {\n    name: \"\",\n    description: \"\",\n  };\n  const [formData, setFormData] = useState({ ...initialFormState });\n  const handleChange = ({ target }) => {\n    const value = target.value;\n    setFormData({\n      ...formData,\n      [target.name]: value,\n    });\n  };\n  const history = useHistory();\n  const handleSubmit = (event) => {\n    let output = [];\n    event.preventDefault();\n    //console.log(\"Submitted:\", formData);\n    async function updateData() {\n      try {\n        const output = await createDeck(formData);\n        history.push(`/decks/${output.id}`);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          // Ignore `AbortError`\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    updateData();\n  };\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\" key=\"0\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\" key=\"1\">\n            Create Deck\n          </li>\n        </ol>\n      </nav>\n      <br />\n      <h2>Create Deck</h2>\n      <form onSubmit={handleSubmit}>\n        <DeckForm formData={formData} handleChange={handleChange} />\n        <Link to=\"/\" className=\"btn btn-secondary\">\n          Cancel\n        </Link>{\" \"}\n        &nbsp;\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Save\n        </button>\n      </form>\n    </div>\n  );\n}\nexport default DeckCreate;\n","import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport DeckForm from \"./DeckForm\";\nimport { readDeck, updateDeck } from \"../utils/api/index\";\n\nfunction DeckEdit() {\n  const initialFormState = {\n    name: \"\",\n    description: \"\",\n  };\n  const params = useParams();\n  const deckId = params.deckId;\n  const [deck, setDeck] = useState({ ...initialFormState });\n  useEffect(() => {\n    async function loadData() {\n      try {\n        const dataFromAPI = await readDeck(deckId);\n        setDeck(dataFromAPI);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          // Ignore `AbortError`\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadData();\n  }, [deckId]);\n\n  const handleChange = ({ target }) => {\n    const value = target.value;\n    setDeck({\n      ...deck,\n      [target.name]: value,\n    });\n  };\n  const history = useHistory();\n  const handleSubmit = (event) => {\n    let output = [];\n    event.preventDefault();\n    //console.log(\"Submitted:\", deck);\n    async function updateData() {\n      try {\n        await updateDeck(deck);\n        history.push(`/decks/${deckId}`);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          // Ignore `AbortError`\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    updateData();\n  };\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\" key=\"0\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\" key=\"1\">\n            <Link to={`/decks/${deckId}`}>Deck Name</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\" key=\"2\">\n            Edit Deck\n          </li>\n        </ol>\n      </nav>\n      <br />\n\n      <h2>Edit Deck</h2>\n\n      <form onSubmit={handleSubmit}>\n        <DeckForm formData={deck} handleChange={handleChange} />\n        <Link to={`/decks/${deckId}`} className=\"btn btn-secondary\">\n          Cancel\n        </Link>{\" \"}\n        &nbsp;\n        <button type=\"submit\" value=\"submit\" className=\"btn btn-primary\">\n          Save\n        </button>\n      </form>\n    </div>\n  );\n}\nexport default DeckEdit;\n","import React from \"react\";\n\nconst CardForm = ({ formData, handleChange }) => {\n  return (\n    <div>\n      <label>Front:</label> <br />\n      <textarea\n        id=\"front\"\n        type=\"text\"\n        name=\"front\"\n        rows=\"3\"\n        onChange={handleChange}\n        value={formData.front}\n        style={{ width: \"100%\" }}\n      />\n      <br />\n      <br />\n      <label>Back:</label> <br />\n      <textarea\n        id=\"back\"\n        type=\"textarea\"\n        name=\"back\"\n        rows=\"3\"\n        onChange={handleChange}\n        value={formData.back}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  );\n};\nexport default CardForm;\n","import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory, useParams } from \"react-router-dom\";\nimport CardForm from \"./CardForm\";\nimport {readDeck, createCard} from \"../utils/api/index\"\n\n\n\nfunction CardCreate(){\n    const params = useParams();\n    const [deck, setDeck] = useState([]);\n    const deckId = params.deckId\n    const initialFormState = {\n        front: \"\",\n        back: \"\",\n        deckId\n      };\n      const [formData, setFormData] = useState({ ...initialFormState });\n      const handleChange = ({ target }) => {\n        const value = target.value;\n       setFormData({\n       ...formData,\n       [target.name]: value,\n     });\n    };\n    useEffect(() => {\n        async function loadData() {\n           try {\n              const dataFromAPI = await readDeck(deckId);\n              setDeck(dataFromAPI);           \n          } catch (error) {\n            if (error.name === \"AbortError\") {\n              // Ignore `AbortError`\n              console.log(\"Aborted\");\n          } else {\n              throw error;\n          }\n        }\n      }\n      loadData();\n    }, [deckId]);\n    const history = useHistory();\n    const handleSubmit = (event) => {\n        let output = [];\n        event.preventDefault();\n        console.log(\"Submitted:\", formData);\n        async function updateData() {\n           try {\n            await createCard(deckId, formData);\n            setFormData(initialFormState);\n          } catch (error) {\n            if (error.name === \"AbortError\") {\n              // Ignore `AbortError`\n              console.log(\"Aborted\");\n          } else {\n              throw error;\n          }\n        }\n      }\n      updateData();\n      };\n\n      if(deck){\n        return (\n            <div>\n                <nav aria-label=\"breadcrumb\">\n                    <ol className=\"breadcrumb\">\n                        <li className=\"breadcrumb-item\" key=\"0\"><Link to=\"/\">Home</Link></li>\n                        <li className=\"breadcrumb-item\" key=\"1\"><Link to={`/decks/${deckId}`}>{deck.name}</Link></li>\n                        <li className=\"breadcrumb-item active\" aria-current=\"page\" key=\"2\">Add Card</li>\n                    </ol>\n                </nav>\n                <br />\n                <h2>{deck.name}: Add Card</h2>\n                <form onSubmit={handleSubmit}>\n                    <CardForm formData={formData} handleChange={handleChange} />\n                    <Link to={`/decks/${deckId}`} className=\"btn btn-secondary\">Done</Link> &nbsp;\n                    <button type=\"submit\" className=\"btn btn-primary\">Save</button>\n                </form>\n            </div>\n        );\n    }else {\n        return \"Loading...\"\n    }\n}\nexport default CardCreate;","import React, { useState, useEffect } from \"react\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport CardForm from \"./CardForm\";\nimport { readDeck, readCard, updateCard } from \"../utils/api/index\";\n\nfunction CardEdit() {\n  const params = useParams();\n  const deckId = params.deckId;\n  const cardId = params.cardId;\n  const [deck, setDeck] = useState({});\n  const [card, setCard] = useState({});\n  useEffect(() => {\n    setDeck({});\n    async function loadData() {\n      try {\n        const dataFromAPI = await readDeck(deckId);\n        setDeck(dataFromAPI);\n        const datafromApie2 = await readCard(cardId);\n        setCard(datafromApie2);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          // Ignore `AbortError`\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    loadData();\n  }, [deckId, cardId]);\n\n  const handleChange = ({ target }) => {\n    const value = target.value;\n    setCard({\n      ...card,\n      [target.name]: value,\n    });\n  };\n  const history = useHistory();\n  const handleSubmit = (event) => {\n    let output = [];\n    event.preventDefault();\n    console.log(\"Submitted:\", card);\n    async function updateData() {\n      try {\n        const dataFromAPI = await updateCard(card);\n\n        history.push(`/decks/${deckId}`);\n      } catch (error) {\n        if (error.name === \"AbortError\") {\n          // Ignore `AbortError`\n          console.log(\"Aborted\");\n        } else {\n          throw error;\n        }\n      }\n    }\n    updateData();\n  };\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\" key=\"0\">\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li className=\"breadcrumb-item\" key=\"1\">\n            <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\" key=\"2\">\n            Edit Card {cardId}\n          </li>\n        </ol>\n      </nav>\n      <br />\n\n      <h2>Edit Card</h2>\n\n      <form onSubmit={handleSubmit}>\n        <CardForm formData={card} handleChange={handleChange} />\n        <Link to={`/decks/${deckId}`} className=\"btn btn-secondary\">\n          Cancel\n        </Link>{\" \"}\n        &nbsp;\n        <button type=\"submit\" className=\"btn btn-primary\">\n          Save\n        </button>\n      </form>\n    </div>\n  );\n}\nexport default CardEdit;\n","import React from \"react\";\nimport Header from \"./Header\";\nimport NotFound from \"./NotFound\";\nimport Home from \"./Home\";\nimport Study from \"./Study\";\nimport Deck from \"./Deck\";\nimport DeckCreate from \"./DeckCreate\";\nimport DeckEdit from \"./DeckEdit\";\nimport CardCreate from \"./CardCreate\";\nimport CardEdit from \"./CardEdit\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nfunction Layout() {\n  return (\n    <div>\n      <Header />\n      <div className=\"container\">\n        <Switch>\n          <Route exact={true} path=\"/\">\n            <Home />\n          </Route>\n          <Route path={\"/decks/:deckId/study\"}>\n            <Study />\n          </Route>\n          <Route path={\"/decks/new\"}>\n            <DeckCreate />\n          </Route>\n          <Route path={\"/decks/:deckId/cards/:cardId/edit\"}>\n            <CardEdit />\n          </Route>\n          <Route path={\"/decks/:deckId/cards/new\"}>\n            <CardCreate />\n          </Route>\n          <Route path={\"/decks/:deckId/edit\"}>\n            <DeckEdit />\n          </Route>\n          <Route path={\"/decks/:deckId\"}>\n            <Deck />\n          </Route>\n\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Layout from \"./Layout\";\n\n/**\n * App is a wrapper for <Layout>, you should not need to change this file.\n */\n\nfunction App() {\n  return (\n    <div className=\"app-routes\">\n      <Switch>\n        <Route path=\"/\">\n          <Layout />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}